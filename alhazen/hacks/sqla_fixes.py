# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/90_sqla_fixes.ipynb.

# %% auto 0
__all__ = ['sqla_source_code', 'source', 'target', 'classes_to_edit']

# %% ../../nbs/90_sqla_fixes.ipynb 2
import os
import re
import local_resources.linkml as linkml
from importlib_resources import files

# %% ../../nbs/90_sqla_fixes.ipynb 3
sqla_source_code = files(linkml).joinpath('schema_sqla.py').read_text()

source = '''has_notes = relationship\( "Note", secondary="Note_has_notes"\)'''
target = '''has_notes = relationship( "Note", 
                             secondary="Note_has_notes", 
                             primaryjoin="Note.id==Note_has_notes.c.Note_id",
                             secondaryjoin="Note.id==Note_has_notes.c.has_notes_id",
                             back_populates="is_about")'''
if re.search(source, sqla_source_code):
    sqla_source_code = re.sub(source, target, sqla_source_code)



# %% ../../nbs/90_sqla_fixes.ipynb 4
source = '''(return f"InformationContentEntity\\(creation_date={.*\n+\s+#.*\n\s+__mapper_args__ = )(\{\n.*?\n\s+\})\n'''
target = '''\g<1>{
        'concrete': True,
        'polymorphic_on': type,
        "polymorphic_identity": "InformationContentEntity",
    }'''
if re.search(source, sqla_source_code, re.MULTILINE):
    sqla_source_code = re.sub(source, target, sqla_source_code, re.MULTILINE)


# %% ../../nbs/90_sqla_fixes.ipynb 5
source = '''(return f"<<<SUBHERE>>>\\(.*\n+\s+#.*\n\s+__mapper_args__ = )(\{\n.*?\n\s+\})\n'''
target = '''\g<1>{
        'concrete': True,
        "polymorphic_identity": "<<<SUBHERE>>>",
    }'''
classes_to_edit = ['Note', 
                   'ScientificKnowledgeCollection', 
                   'ScientificKnowledgeExpression', 
                   'ScientificKnowledgeFragment',
                   'ScientificKnowledgeItem']
for c in classes_to_edit:
    s = source.replace('<<<SUBHERE>>>', c)
    t = target.replace('<<<SUBHERE>>>', c)
    if re.search(s, sqla_source_code, re.MULTILINE):
        sqla_source_code = re.sub(s, t, sqla_source_code, re.MULTILINE)

# %% ../../nbs/90_sqla_fixes.ipynb 6
source = '''has_notes = relationship\( "Note", secondary="<<<SUBHERE>>>_has_notes"\)\n'''
target = '''has_notes = relationship( "Note", secondary="<<<SUBHERE>>>_has_notes", back_populates="is_about")\n'''
classes_to_edit = ['InformationContentEntity',
                   'Note', 
                   'ScientificKnowledgeCollection', 
                   'ScientificKnowledgeExpression', 
                   'ScientificKnowledgeFragment',
                   'ScientificKnowledgeItem']
for c in classes_to_edit:
    s = source.replace('<<<SUBHERE>>>', c)
    t = target.replace('<<<SUBHERE>>>', c)
    if re.search(s, sqla_source_code, re.MULTILINE):
        sqla_source_code = re.sub(s, t, sqla_source_code, re.MULTILINE)

# %% ../../nbs/90_sqla_fixes.ipynb 7
source = '''is_about = relationship\( "InformationContentEntity", secondary="Note_is_about"\)'''
target = '''is_about = relationship( "InformationContentEntity", secondary="Note_is_about", back_populates="has_notes")'''
if re.search(source, sqla_source_code, re.MULTILINE):
    sqla_source_code = re.sub(source, target, sqla_source_code, re.MULTILINE)

# %% ../../nbs/90_sqla_fixes.ipynb 8
os.rename(files(linkml).joinpath('schema_sqla.py'), files(linkml).joinpath('schema_sqla_original.py'))
files(linkml).joinpath('schema_sqla.py').write_text(sqla_source_code)
