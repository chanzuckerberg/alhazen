# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/20_toolkit.ipynb.

# %% auto 0
__all__ = ['AlhazenToolkit']

# %% ../nbs/20_toolkit.ipynb 3
import local_resources.linkml as linkml

from .core import OllamaRunner
from .tools.basic import *
from .tools.metadata_extraction_tool import * 
from .tools.paperqa_emulation_tool import PaperQAEmulationTool 
from .tools.paperqa_emulation_tool import PaperQAEmulationTool 
from .utils.ceifns_db import *

from langchain.chat_models.base import BaseChatModel
from langchain.agents.agent import RunnableAgent
from langchain.tools import BaseTool
from langchain.pydantic_v1 import BaseModel, Extra, Field, root_validator
from langchain.schema.prompt_template import format_document

from importlib_resources import files
import local_resources.prompt_elements as prompt_elements

from sqlalchemy.orm import sessionmaker
from typing import List, Any, Optional

# %% ../nbs/20_toolkit.ipynb 4
# NOTE - Use LangChain's SQL_DATABASE TOOLKIT AS A MODEL 
# https://github.com/langchain-ai/langchain/blob/535db72607c4ae308566ede4af65295967bb33a8/libs/community/langchain_community/agent_toolkits/sql/toolkit.py#L18
#
# Use environment variables to denote the database name + base file location
# os.environ['ALHAZEN_DB_NAME'] = 'em_tech'
# os.environ['LOCAL_FILE_PATH'] = '/Users/gburns/alhazen/'

class AlhazenToolkit(BaseModel):
    '''Toolkit for building and querying an Alhazen CEIFNS (pron. 'SAI-FiNS') database 
    (CEIFNS = Collection-Expression-Item-Fragment-Note-Summary).'''

    # The local literature database (Collections, Expressions, Items, and Fragments)
    db: Ceifns_LiteratureDb = Field(exclude=True)
    llm : BaseChatModel = Field(exclude=True)
    agent : Optional[RunnableAgent] = Field(exclude=True) 
    
    class Config:
        """Configuration for this pydantic object."""
        arbitrary_types_allowed = True

    def get_tools(self) -> List[BaseTool]:
        """Get the tools in the toolkit."""

        add_collection_tool_description = (
            "This tool executes a search for scientific papers in the EPMC database based on a query"
            " and then builds a collection out of the papers returned. "
            "Input to this tool has three parameters: \n"
            "- 'id' which is string that denotes the identifier of the collection in the database.\n"
            "- 'query' which is string that defines a query using Boolean logic for search terms.\n"
            "- 'name' which is a string that defines a descriptive name for the collection.\n"
            "The tool will execute an query over the remote database, create the collection and add papers to the collection to our local database."
            "If successful, it will return 'Final Answer'. If not, it will return an error report."
        )
        add_collection_tool = AddCollectionFromEPMCTool(db=self.db, description=add_collection_tool_description)
        
        describe_collection_tool_description = (
            "This tool describes the contents of a collection in the database. "
            "Input to this tool has one parameters: \n"
            "- 'id' which is string that denotes the identifier of the collection in the database.\n"
            "If successful, it will return 'Final Answer'. If not, it will return an error report."
        )
        describe_collection_tool = DescribeCollectionCompositionTool(db=self.db, description=describe_collection_tool_description)

        delete_collection_tool_description = (
            "This tool deletes a collection from the database."
        )
        delete_collection_tool = DeleteCollectionTool(db=self.db, description=delete_collection_tool_description)

        check_expression_tool_description = (
            "This tool checks if the database contains a paper. "
            "Input to this tool has one parameter: \n"
            "- 'query' which is a search string for the paper (based on either the id or title).\n"
            "The tool will query the database and report its findings."
        )
        check_expression_tool = CheckExpressionTool(db=self.db, description=check_expression_tool_description)

        retrieve_full_text_tool_description = (
            "This tool invokes a web search for single full text paper from the web given a doi identifier. "
            "Input to this tool has one parameter: \n"
            "- 'paper_id' which is a string that denotes the doi identifier of the paper in question. This must start with the string 'doi:'\n"
            "The tool will search online for the paper, return it and add it's text to the database."
            "If successful, it will return 'Final Answer'. If not, it will return an error report."
        )
        retrieve_full_text_tool = RetrieveFullTextTool(db=self.db, description=retrieve_full_text_tool_description)

        metadata_extraction_tool_description = (
            "This tool extracts experimental metadata for an experiment from a single full text paper."
            "In order to use this tool, you need to know if there is a full text version of the paper in the database"
            "If there is not, you need to retrieve a copy of the full text before using this" 
            "Input to this tool has two parameters: \n"
            "- 'paper_id' which is a string that denotes the doi identifier of the paper in question. This must start with the string 'doi:'.\n"
            "- 'extraction_type' which denotes the type of experiment being analysed. This should be set to the string 'cryoet'.\n"
            "The tool will execute an LLM over the paper to extract metadata from available text "
            " and then insert the metadata into the database. The output is a "
            "string that returns a completion message (either positive or an error report)."
        )
        metadata_extraction_tool = MetadataExtractionTool(
            db=self.db, llm=self.llm, description=metadata_extraction_tool_description
        )

        simple_extraction_tool_description = (
            "This tool extracts information from a single full text paper."
            "In order to use this tool, you need to know if there is a full text version of the paper in the database"
            "If there is not, you need to retrieve a copy of the full text before using this." 
            "Input to this tool has three parameters: \n"
            "- 'paper_id' which is a string that denotes the doi identifier of the paper in question. This must start with the string 'doi:'.\n"
            "- 'variable_name' which denotes the name of the variable that the question is attempting to describe (e.g. 'species_name', 'sample_preparation_method').\n"
            "- 'question' which is the question that must be answered to provide a value for the specified variable (e.g., 'Rat', 'Plunge Vitrificiation').\n"
            "The tool will execute an LLM over the paper to extract answers to the specified question. "
            "Output from the tool will be a JSON-formatted string with two fields: 'report' and 'data'." 
            "Text in the report field specifies how the tool performed this task."
        )
        simple_extraction_tool = SimpleExtractionWithRAGTool(
            db=self.db, llm=self.llm, description=simple_extraction_tool_description
        )

        paperqa_emulation_tool_description = (
            "This tool answers scientific questions by searching for papers from Alhazen's database, "
            "reading a small subset of them and then synthesizing a response in the form of an essay. "
            "Only use this tool to respond to scientific questions that you already have built a database for."
            "Input to this tool is a question, the ID value for the collection that the question "
            "will be asked over (collection_id), the number of documents to be sampled (n_sample_size), "
            "the number of documents to be synthesized in the final analysis."
            "The tool will execute an Map-Reduce RAG pipeline to query the vector store, and then "
            "summarize the information returned to write a response to the question."
        )
        paperqa_emulation_tool = PaperQAEmulationTool(
            db=self.db, llm=self.llm, description=paperqa_emulation_tool_description
        )
        tool_list = [
            add_collection_tool,
            describe_collection_tool,
            delete_collection_tool,
            retrieve_full_text_tool,
            metadata_extraction_tool,
            simple_extraction_tool,
            paperqa_emulation_tool,
            check_expression_tool
        ]

        introspection_tool_description = (
            "This tool answers questions about the tools I have access to and what they do."
            "Always call this tool when a user asks 'How might you ...?'"
            "Call the tool with the description of the task being asked about."
        )
        introspection_tool = IntrospectionTool(description=introspection_tool_description)
        #tool_list.append(introspection_tool)

        return tool_list
    

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        if self.db.session is None:
            session_class = sessionmaker(bind=self.db.engine)
            self.db.session = session_class()
