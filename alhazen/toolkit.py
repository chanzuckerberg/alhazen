# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/20_toolkit.ipynb.

# %% auto 0
__all__ = ['AlhazenToolkit']

# %% ../nbs/20_toolkit.ipynb 3
import local_resources.linkml as linkml

from .core import OllamaRunner
from .tools.basic import EMPCSearchTool
from .tools.metadata_extraction_tool import MetadataExtractionTool
from .utils.ceifns_db import *

from langchain.tools import BaseTool
from langchain.pydantic_v1 import BaseModel, Extra, Field, root_validator
from langchain.schema.prompt_template import format_document

from importlib_resources import files
import local_resources.prompt_elements as prompt_elements

from sqlalchemy.orm import sessionmaker
from typing import List

# %% ../nbs/20_toolkit.ipynb 4
# NOTE - Use LangChain's SQL_DATABASE TOOLKIT AS A MODEL 
# https://github.com/langchain-ai/langchain/blob/535db72607c4ae308566ede4af65295967bb33a8/libs/community/langchain_community/agent_toolkits/sql/toolkit.py#L18
#
# Use environment variables to denote the database name + base file location
# os.environ['ALHAZEN_DB_NAME'] = 'em_tech'
# os.environ['LOCAL_FILE_PATH'] = '/Users/gburns/alhazen/'

class AlhazenToolkit(BaseModel):
    '''Toolkit for building and querying an Alhazen CEIFNS (pron. 'SAI-FiNS') database 
    (CEIFNS = Collection-Expression-Item-Fragment-Note-Summary).'''

    # The local literature database (Collections, Expressions, Items, and Fragments)
    db: Ceifns_LiteratureDb = Field(exclude=True)
    ollr : OllamaRunner = Field(exclude=True)
    
    class Config:
        """Configuration for this pydantic object."""
        arbitrary_types_allowed = True

    def get_tools(self) -> List[BaseTool]:
        """Get the tools in the toolkit."""
        epmc_search_tool_description = (
            "This tool executes a search for scientific papers in the EPMC database based on a query"
            " and then builds a collection out of the papers returned. "
            "Input to this tool has three parameters: \n"
            "- 'query' which is string that defines a query using Boolean logic for search terms.\n"
            "- 'name' which is a string that defines a descriptive name for the collection.\n"
            "- 'date_query' which is an optional string that defines range of dates over which the returned papers should have been published.\n"
            "The tool will execute an query over the remote database, create the collection and add papers to the collection to our local database."
            "If successful, it will return 'Final Answer'. If not, it will return an error report."
        )
        epmc_search_tool = EMPCSearchTool(db=self.db, description=epmc_search_tool_description)
        
        metadata_extraction_tool_description = (
            "Input to this tool is a doi identifier, a search term for section titles in "
            "the paper, and the name of a type of experiment (drawn from a predefined list). "
            "The tool will execute an LLM over the paper to extract metadata from available text "
            " and then insert the metadata into the database. The output is a "
            "string that returns a completion message (either positive or an error report)."
        )
        metadata_extraction_tool = MetadataExtractionTool(
            db=self.db, ollr=self.ollr, llm=self.ollr.llm, description=metadata_extraction_tool_description
        )
                
        return [
            epmc_search_tool,
            metadata_extraction_tool
        ]

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        if self.db.session is None:
            session_class = sessionmaker(bind=self.db.engine)
            self.db.session = session_class()
