# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/20_toolkit.ipynb.

# %% auto 0
__all__ = ['AlhazenToolkit', 'MetadataExtractionToolkit']

# %% ../nbs/20_toolkit.ipynb 4
import local_resources.linkml as linkml

from .core import OllamaRunner
from .tools.basic import *
from .tools.metadata_extraction_tool import * 
from .tools.paperqa_emulation_tool import PaperQAEmulationTool 
from .utils.ceifns_db import *

from langchain.chat_models.base import BaseChatModel
from langchain.agents.agent import RunnableAgent
from langchain.tools import BaseTool
from langchain.pydantic_v1 import BaseModel, Extra, Field, root_validator
from langchain.schema.prompt_template import format_document

from importlib_resources import files
import local_resources.prompt_elements as prompt_elements

from sqlalchemy.orm import sessionmaker
from typing import List, Any, Optional

# %% ../nbs/20_toolkit.ipynb 6
# NOTE - Use LangChain's SQL_DATABASE TOOLKIT AS A MODEL 
# https://github.com/langchain-ai/langchain/blob/535db72607c4ae308566ede4af65295967bb33a8/libs/community/langchain_community/agent_toolkits/sql/toolkit.py#L18
#
# Use environment variables to denote the database name + base file location
# os.environ['ALHAZEN_DB_NAME'] = 'em_tech'
# os.environ['LOCAL_FILE_PATH'] = '/Users/gburns/alhazen/'

class AlhazenToolkit(BaseModel):
    '''Toolkit for building and querying an Alhazen CEIFNS (pron. 'SAI-FiNS') database 
    (CEIFNS = Collection-Expression-Item-Fragment-Note-Summary).'''

    # The local literature database (Collections, Expressions, Items, and Fragments)
    db: Ceifns_LiteratureDb = Field(exclude=True)
    llm : BaseChatModel = Field(exclude=True)
    agent : Optional[RunnableAgent] = Field(exclude=True) 
    
    class Config:
        """Configuration for this pydantic object."""
        arbitrary_types_allowed = True

    def get_tools(self) -> List[BaseTool]:
        """Get the tools in the toolkit."""

        add_collection_tool_description = (
            "This tool builds a new collection of scientific papers based on querying external databases."
        )
        add_collection_tool = AddCollectionFromEPMCTool(db=self.db, description=add_collection_tool_description)

        add_authors_to_collection_tool_description = (
            "This tool adds author- and institute-level information to an existing collection of scientific papers."
        )
        add_authors_to_collection_tool = AddAuthorsToCollectionTool(db=self.db, description=add_authors_to_collection_tool_description)
        
        describe_collection_tool_description = (
            "This tool describes the contents of a collection in the database. "
        )
        describe_collection_tool = DescribeCollectionCompositionTool(db=self.db, description=describe_collection_tool_description)

        delete_collection_tool_description = (
            "This tool deletes a collection from the database."
        )
        delete_collection_tool = DeleteCollectionTool(db=self.db, description=delete_collection_tool_description)

        check_expression_tool_description = (
            "This tool checks if the database contains a paper. "
        )
        check_expression_tool = CheckExpressionTool(db=self.db, description=check_expression_tool_description)

        retrieve_full_text_for_a_collection_tool_description = (
            "This tool retrieves full text versions of all papers in a collection."
        )
        retrieve_full_text_for_a_collection_tool = RetrieveFullTextToolForACollection(db=self.db, description=retrieve_full_text_for_a_collection_tool_description)

        retrieve_full_text_tool_description = (
            "This tool retrieves the full text version for a single paper. This is specified by one parameter: paper_id, which MUST start with 'doi:'. "
        )
        retrieve_full_text_tool = RetrieveFullTextTool(db=self.db, description=retrieve_full_text_tool_description)

        metadata_extraction_tool_description = (
            "This tool extracts all metadata for a specified type of experiment from a single full text paper."
        )
        metadata_extraction_tool = MetadataExtraction_EverythingEverywhere_Tool(
            db=self.db, llm=self.llm, description=metadata_extraction_tool_description
        )

        simple_extraction_tool_description = (
            "This tool extracts information from a single full text paper based on a specific question."
        )
        simple_extraction_tool = SimpleExtractionWithRAGTool(
            db=self.db, llm=self.llm, description=simple_extraction_tool_description
        )

        paperqa_emulation_tool_description = (
            "This tool writes a short essay to answer a scientific question."
        )
        paperqa_emulation_tool = PaperQAEmulationTool(
            db=self.db, llm=self.llm, description=paperqa_emulation_tool_description
        )
        tool_list = [
            add_collection_tool,
            add_authors_to_collection_tool,
            describe_collection_tool,
            delete_collection_tool,
            retrieve_full_text_tool,
            retrieve_full_text_for_a_collection_tool,
            metadata_extraction_tool,
            simple_extraction_tool,
            paperqa_emulation_tool,
            check_expression_tool
        ]

        trial_run_tool_description = (
            "This tool executes my planning chain for a given user instruction and reports back on what I plan do."
        )
        trial_run_tool = IntrospectionTool(description=trial_run_tool_description)
        tool_list.append(trial_run_tool)

        return tool_list
    

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        if self.db.session is None:
            session_class = sessionmaker(bind=self.db.engine)
            self.db.session = session_class()

# %% ../nbs/20_toolkit.ipynb 8
class MetadataExtractionToolkit(BaseModel):
    '''Toolkit for running and testing Alhazen Metadata Extraction Tools'''

    # The local literature database (Collections, Expressions, Items, and Fragments)
    db: Ceifns_LiteratureDb = Field(exclude=True)
    llm : BaseChatModel = Field(exclude=True)
    agent : Optional[RunnableAgent] = Field(exclude=True) 
    
    class Config:
        """Configuration for this pydantic object."""
        arbitrary_types_allowed = True

    def get_tools(self) -> List[BaseTool]:
        """Get the tools in the toolkit."""

        metadata_extraction_everything_everywhere_tool_description = (
            "This tool asks all metadata questions in a single shot over the whole document."
        )
        metadata_extraction_everything_everywhere_tool = MetadataExtraction_EverythingEverywhere_Tool(
            db=self.db, llm=self.llm, description=metadata_extraction_everything_everywhere_tool_description
        )

        metadata_extraction_rag_on_sections_tool_description = (
            "This tool asks each question separately over whole sections selected by RAG."
        )
        metadata_extraction_rag_on_sections_tool = MetadataExtraction_RAGOnSections_Tool(
            db=self.db, llm=self.llm, description=metadata_extraction_rag_on_sections_tool_description
        )

        metadata_extraction_simple_extraction_tool_description = (
            "This tool asks a single question over sections selected by RAG."
        )
        metadata_extraction_simple_extraction_tool = SimpleExtractionWithRAGTool(
            db=self.db, llm=self.llm, description=metadata_extraction_simple_extraction_tool_description
        )

        tool_list = [
            metadata_extraction_everything_everywhere_tool,
            metadata_extraction_rag_on_sections_tool,
            metadata_extraction_simple_extraction_tool
        ]

        return tool_list
    

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        if self.db.session is None:
            session_class = sessionmaker(bind=self.db.engine)
            self.db.session = session_class()
