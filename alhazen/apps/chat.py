# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/10_chatbot_gradio_app.ipynb.

# %% auto 0
__all__ = ['AlhazenAgentChatBot']

# %% ../../nbs/10_chatbot_gradio_app.ipynb 2
from ..core import OllamaRunner, PromptTemplateRegistry
from ..schema_sqla import *
from ..tools.basic import AddCollectionFromEPMCTool, DeleteCollectionTool
from ..tools.paperqa_emulation_tool import PaperQAEmulationTool
from ..tools.metadata_extraction_tool import MetadataExtractionTool, MetadataExtractionWithRAGTool 
from ..toolkit import AlhazenToolkit
from ..utils.jats_text_extractor import NxmlDoc
from ..utils.ceifns_db import Ceifns_LiteratureDb, create_ceifns_database, drop_ceifns_database

from langchain import hub
from langchain.agents import AgentExecutor, create_structured_chat_agent
from langchain.agents.format_scratchpad import format_log_to_str
from langchain.agents.output_parsers import ReActJsonSingleInputOutputParser
from langchain.agents.output_parsers import ReActSingleInputOutputParser
from langchain.callbacks.tracers import ConsoleCallbackHandler
from langchain.chat_models import ChatOllama
from langchain.pydantic_v1 import BaseModel
from langchain.tools.render import render_text_description, render_text_description_and_args
from langchain.agents.output_parsers.json import JSONAgentOutputParser

import gradio as gr
import os
import pandas as pd
from pathlib import Path
import re
import requests
from typing import Dict, List, Optional, Sequence, Union
from uuid import UUID

# %% ../../nbs/10_chatbot_gradio_app.ipynb 3
class AlhazenAgentChatBot:
    '''Provide access to an Alhazen agent via a simple chat interface with Gradio.'''

    def __init__(self):

        if os.environ.get('ALHAZEN_DB_NAME') is None: 
            raise Exception('Which database do you want to use for this application?')
        db_name = os.environ['ALHAZEN_DB_NAME']

        if os.environ.get('LOCAL_FILE_PATH') is None: 
            raise Exception('Where are you storing your local literature database?')
        loc = os.environ['LOCAL_FILE_PATH']

        self.db = Ceifns_LiteratureDb(loc=loc, name=db_name)
        self.ollr = OllamaRunner('mixtral')
        self.llm  = self.ollr.llm

        tk = AlhazenToolkit(db=self.db, ollr=self.ollr)
        self.tools = tk.get_tools()

        pts = PromptTemplateRegistry()
        pts.load_prompts_from_yaml('alhazen_base.yaml')

        self.prompt = pts.get_prompt_template('structured chat agent').generate_chat_prompt_template()
        
        agent = create_structured_chat_agent(self.llm, self.tools, self.prompt)

        self.agent_executor = AgentExecutor(agent=agent, 
                                            tools=self.tools,
                                            verbose=True, 
                                            handle_parsing_errors=True)

    # We need to add these input/output schemas because the current AgentExecutor
    # is lacking in schemas.
    class ChatRequest(BaseModel):
        question: str
        chat_history: Optional[List[Dict[str, str]]]

    class Input(BaseModel):
        input: str

    class Output(BaseModel):
        output: str

    def run_gradio(self):

        def add_text(history, text):
            #print('add_text: history: %s, text: %s'%(history, text))
            history = history + [(text, None)]
            return history, gr.Textbox(value="", interactive=False)
            
        def clear_chat(history):
            return []

        def bot(history):
            #print('bot: history: %s'%(history))
            # prompt to send to the agent is the last message from the user
            prompt = history[-1][0]
            response = self.agent_executor.invoke({"input": prompt}, config={'callbacks': [ConsoleCallbackHandler()]})
            print('RESPONSE: %s'%(str(response)))
            history[-1][1] = str(response.get('output'))
            print('WHOLE HISTORY: %s'%(history))
            return history

        with gr.Blocks() as demo:
            with gr.Tab("Chat"):
                chatbot = gr.Chatbot(
                    [],
                    elem_id="chatbot",
                    bubble_full_width=False,
                    #avatar_images=(None, files(alhazen_resources).joinpath('alhazen.png'))
                )
                with gr.Row():
                    txt = gr.Textbox(
                        scale=4,
                        show_label=False,
                        placeholder="Enter text and press enter.",
                        container=False,
                    )
                    clear_btn = gr.Button("Clear")
            with gr.Tab("Dashboard"):
                with gr.Row():
                    doc_text = gr.HTML(label="File Contents")
            
            txt_msg = txt.submit(add_text, [chatbot, txt], [chatbot, txt], queue=False).then(bot, chatbot, chatbot)
            txt_msg.then(lambda: gr.Textbox(interactive=True), None, [txt], queue=False)                
            clear_btn.click(clear_chat, [], [chatbot], queue=False)
                
        demo.queue()
        demo.launch()
