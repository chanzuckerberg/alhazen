# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_client.ipynb.

# %% auto 0
__all__ = ['app', 'count_papers', 'list_corpora']

# %% ../nbs/02_client.ipynb 2
import sys

from flask import Flask, jsonify, make_response, request
from flask_cors import CORS
from markupsafe import escape
import pandas as pd
import os
import re
import json
import datetime
import numpy as np


# %% ../nbs/02_client.ipynb 3
#| export 

# %% ../nbs/02_client.ipynb 4
# create and configure the app
app = Flask(__name__)
CORS(app)

@app.route('/chat', methods=['POST'])
def count_papers():
    chat_history = request.json.get('history')

    cols = ['id','paper_count']
    print(sql, file=sys.stderr)
    return run_query(cs, prefix, sql, cols)

@app.route('/api/list_corpora/<prefix>', methods=['GET'])
def list_corpora(prefix):
    #cs = get_cursor(sf)
    #sql1 = '''SELECT DISTINCT d.ID, CORPUS_NAME
    #        FROM PREFIX_CORPUS as d
    #        JOIN PREFIX_CORPUS_TO_PAPER as dp on (d.ID=dp.ID_CORPUS)
    #        JOIN FIVETRAN.KG_RDS_CORE_DB.PAPER as p on (p.ID=dp.ID_PAPER)
    #    GROUP BY d.ID, CORPUS_NAME
    #    ORDER BY d.ID + 0;
    #'''
    #cols1 = ['id','label']
    #sql1 = re.sub('PREFIX_', prefix, sql1)
    #try:
    #    df = sf.execute_query(cs, sql1, cols1)
    #except ProgrammingError as pErr:
    #    if 'does not exist or not authorized ' in pErr.args[0]:
    #        print(pErr + ' - UNDERLYING DB TABLES ARE MISSING - RETURN EMPTY DATA')
    #        return make_response({})
    #    else:
    #        raise pErr
    #data = df.to_dict('records')
    response = make_response(jsonify({'hello': 'world'}))
    return response
